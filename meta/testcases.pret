@prefix : <http://ontologi.es/doap-tests#>.
[] a :Test; :test_script f`t/00-begin.t Type-Tiny`; :purpose "Print some standard diagnostics before beginning testing.".
[] a :Test; :test_script f`t/01-compile.t Type-Tiny`; :purpose "Test that Type::Tiny, Type::Library, etc compile.".
[] a :Test; :test_script f`t/02-api.t Type-Tiny`; :purpose "Test that Type::Tiny and Type::Coercion provide a Moose/Mouse-compatible API.".
[] a :Test; :test_script f`t/03-leak.t Type-Tiny`; :purpose "Check for memory leaks. These tests are not comprehensive; chances are that there are still memory leaks lurking somewhere in Type::Tiny. If you have any concrete suggestions for things to test, or fixes for identified memory leaks, please file a bug report. https://rt.cpan.org/Ticket/Create.html?Queue=Type-Tiny.".
[] a :Test; :test_script f`t/98-param-eg-from-docs.t Type-Tiny`; :purpose "An example of parameterized types from Type::Tiny::Manual::Libraries. The example uses Type::Tiny, Type::Library, and Type::Coercion, and makes use of inlining and parameterization, so is a good canary to check everything is working.".
[] a :Test; :test_script f`t/99-moose-std-types-test.t Type-Tiny`; :purpose "Type constraint tests pilfered from the Moose test suite.".
m`Devel::TypeTiny::Perl58Compat Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Devel-TypeTiny-Perl58Compat/basic.t Type-Tiny`; :purpose "Checks 're::is_regexp()' works." ];
	.
m`Error::TypeTiny Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Error-TypeTiny/basic.t Type-Tiny`; :purpose "Tests for basic Error::TypeTiny functionality." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Error-TypeTiny/stacktrace.t Type-Tiny`; :purpose "Tests that Error::TypeTiny is capable of providing stack traces." ];
	.
m`Error::TypeTiny::Assertion Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Error-TypeTiny-Assertion/basic.t Type-Tiny`; :purpose "Tests Error::TypeTiny::Assertion." ];
	.
m`Error::TypeTiny::Compilation Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Error-TypeTiny-Compilation/basic.t Type-Tiny`; :purpose "Tests for Error::TypeTiny::Compilation, mostly by triggering compilation errors using Eval::TypeTiny." ];
	.
m`Error::TypeTiny::WrongNumberOfParameters Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Error-TypeTiny-WrongNumberOfParameters/basic.t Type-Tiny`; :purpose "Test Error::TypeTiny::WrongNumberOfParameters." ];
	.
m`Eval::TypeTiny Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Eval-TypeTiny/aliases-devel-lexalias.t Type-Tiny`; :purpose "Tests Eval::TypeTiny supports alias=>1 using Devel::LexAlias implementation." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Eval-TypeTiny/aliases-native.t Type-Tiny`; :purpose "Tests Eval::TypeTiny supports alias=>1 using Perl refaliasing." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Eval-TypeTiny/aliases-padwalker.t Type-Tiny`; :purpose "Tests Eval::TypeTiny supports alias=>1 using PadWalker implementation." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Eval-TypeTiny/aliases-tie.t Type-Tiny`; :purpose "Tests Eval::TypeTiny supports alias=>1 using 'tie()' implementation." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Eval-TypeTiny/basic.t Type-Tiny`; :purpose "Tests Eval::TypeTiny." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Eval-TypeTiny/lexical-subs.t Type-Tiny`; :purpose "Tests Eval::TypeTiny with experimental lexical subs." ];
	.
m`Eval::TypeTiny::CodeAccumulator Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Eval-TypeTiny-CodeAccumulator/basic.t Type-Tiny`; :purpose "Tests Eval::TypeTiny::CodeAccumulator." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Eval-TypeTiny-CodeAccumulator/callback.t Type-Tiny`; :purpose "Tests Eval::TypeTiny::CodeAccumulator using the callback returned from 'add_placeholder'." ];
	.
m`Test::TypeTiny Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Test-TypeTiny/basic.t Type-Tiny`; :purpose "Tests Test::TypeTiny (which is somewhat important because Test::TypeTiny is itself used for the majority of the type constraint tests). In particular, this tests that everything works when the '$EXTENDED_TESTING' environment variable is false." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Test-TypeTiny/extended.t Type-Tiny`; :purpose "Tests Test::TypeTiny works when the '$EXTENDED_TESTING' environment variable is true. Note that Test::Tester appears to have issues with subtests, so currently 'should_pass' and 'should_fail' are not tested." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Test-TypeTiny/matchfor.t Type-Tiny`; :purpose "Tests Test::TypeTiny (which is somewhat important because Test::TypeTiny is itself used for the majority of the type constraint tests). In particular, this tests that everything works when the '$EXTENDED_TESTING' environment variable is false." ];
	.
m`Type::Coercion Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Coercion/basic.t Type-Tiny`; :purpose "Checks Type::Coercion works." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Coercion/esoteric.t Type-Tiny`; :purpose "Checks various undocumented Type::Coercion methods. The fact that these are tested here should not be construed to mean tht they are any any way a stable, supported part of the Type::Coercion API." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Coercion/frozen.t Type-Tiny`; :purpose "Type::Coercion objects are mutable, unlike Type::Tiny objects. However, they can be frozen, making them immutable. (And Type::Tiny will freeze them occasionally, if it feels it has to.)" ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Coercion/inlining.t Type-Tiny`; :purpose "Checks Type::Coercion can be inlined." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Coercion/parameterized.t Type-Tiny`; :purpose "Checks the 'Split' and 'Join' parameterized coercions from Types::Standard." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Coercion/smartmatch.t Type-Tiny`; :purpose "Checks Type::Coercion overload of '~~'." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Coercion/typetiny-constructor.t Type-Tiny`; :purpose "Checks proper Type::Coercion objects are automatically created by the Type::Tiny constructor." ];
	.
m`Type::Coercion::FromMoose Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Coercion-FromMoose/basic.t Type-Tiny`; :purpose "Checks the types adopted from Moose still have a coercion which works." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Coercion-FromMoose/errors.t Type-Tiny`; :purpose "Checks crazy Type::Coercion::FromMoose errors." ];
	.
m`Type::Coercion::Union Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Coercion-Union/basic.t Type-Tiny`; :purpose "Checks Type::Coercion::Union works." ];
	.
m`Type::Library Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Library/assert.t Type-Tiny`; :purpose "Checks that the assertion functions exported by a type library work as expected." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Library/declared-types.t Type-Tiny`; :purpose "Tests that placeholder objects generated by '-declare' work." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Library/deprecation.t Type-Tiny`; :purpose "Checks Type::Library warns about deprecated types." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Library/errors.t Type-Tiny`; :purpose "Tests errors thrown by Type::Library." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Library/exportables-duplicated.t Type-Tiny`; :purpose "Tests type libraries can detect two types trying to export the same functions." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Library/exportables.t Type-Tiny`; :purpose "Tests correct things are exported by type libraries." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Library/import-params.t Type-Tiny`; :purpose "Checks 'of' and 'where' import options works." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Library/inheritance.t Type-Tiny`; :purpose "Checks that it's possible to extend existing type libraries." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Library/is.t Type-Tiny`; :purpose "Checks that the check functions exported by a type library work as expected." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Library/own-registry.t Type-Tiny`; :purpose "Checks type libraries put types in their own type registries." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Library/recursive-type-definitions.t Type-Tiny`; :purpose "Tests that types may be defined recursively." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Library/remove-type.t Type-Tiny`; :purpose "Tests Type::Library's hidden '_remove_type' method." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Library/to.t Type-Tiny`; :purpose "Checks that the coercion functions exported by a type library work as expected." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Library/types.t Type-Tiny`; :purpose "Checks that the type functions exported by a type library work as expected." ];
	.
m`Type::Params Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/alias.t Type-Tiny`; :purpose "Test 'compile_named' supports parameter aliases." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/badsigs.t Type-Tiny`; :purpose "Check that people doing silly things with Test::Params get" ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/carping.t Type-Tiny`; :purpose "Test Type::Params' interaction with Carp: use Type::Params compile => { confess => 1 };" ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/clone.t Type-Tiny`; :purpose "Test 'compile' and 'compile_named' support autocloned parameters." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/coerce.t Type-Tiny`; :purpose "Test Type::Params usage of types with coercions." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/compile-named-avoidcallbacks.t Type-Tiny`; :purpose "Test Type::Params' 'compile_named' function with $AvoidCallbacks true." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/compile-named-bless.t Type-Tiny`; :purpose "Test Type::Params' brand spanking new 'compile_named' function." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/compile-named-oo-pp.t Type-Tiny`; :purpose "Test Type::Params 'compile_named_oo' function, with PERL_TYPE_PARAMS_XS set to \"0\"." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/compile-named-oo.t Type-Tiny`; :purpose "Test Type::Params 'compile_named_oo' function." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/compile-named.t Type-Tiny`; :purpose "Test Type::Params' brand spanking new 'compile_named' function." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/defaults.t Type-Tiny`; :purpose "Test 'compile' and 'compile_named' support defaults for parameters." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/goto_next.t Type-Tiny`; :purpose "Test Type::Params 'goto_next' option." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/hashorder.t Type-Tiny`; :purpose "Test Type::Params' brand spanking new 'compile_named' function." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/methods.t Type-Tiny`; :purpose "Test Type::Params usage for method calls." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/mixednamed.t Type-Tiny`; :purpose "Test Type::Params usage with mix of positional and named parameters." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/multisig-custom-message.t Type-Tiny`; :purpose "Make sure that custom 'multisig()' messages work." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/multisig-gotonext.t Type-Tiny`; :purpose "Test Type::Params 'multi' signatures work with 'goto_next'." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/multisig.t Type-Tiny`; :purpose "Test Type::Params 'multisig' function." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/named-to-list.t Type-Tiny`; :purpose "Test Type::Params usage with named parameters and 'named_to_list'." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/named.t Type-Tiny`; :purpose "Test Type::Params usage with named parameters." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/noninline.t Type-Tiny`; :purpose "Test Type::Params with type constraints that cannot be inlined." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/on-die.t Type-Tiny`; :purpose "Test Type::Params support for 'on_die'." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/optional.t Type-Tiny`; :purpose "Test Type::Params usage with optional parameters." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/positional.t Type-Tiny`; :purpose "Test Type::Params positional parameters, a la the example in the documentation: sub nth_root { state $check = compile( Num, Num ); my ($x, $n) = $check->(@_); return $x ** (1 / $n); }" ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/slurpy.t Type-Tiny`; :purpose "Test Type::Params usage with slurpy parameters." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/strictness.t Type-Tiny`; :purpose "Test Type::Params 'strictness' option." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/v2-allowdash.t Type-Tiny`; :purpose "Test allow_dash option for Type::Params." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/v2-default-on-undef.t Type-Tiny`; :purpose "Tests that Type::Params supports 'default_on_undef'." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/v2-defaults.t Type-Tiny`; :purpose "Check that Type::Params v2 default coderefs get passed an invocant." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/v2-delayed-compilation.t Type-Tiny`; :purpose "Tests that Type::Params v2 'signature_for' delays signature compilation." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/v2-exceptions.t Type-Tiny`; :purpose "Test a few Type::Params v2 exceptions." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/v2-fallback.t Type-Tiny`; :purpose "Test the 'fallback' option for modern Type::Params v2 API." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/v2-listtonamed.t Type-Tiny`; :purpose "Test list_to_named option for Type::Params." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/v2-multi.t Type-Tiny`; :purpose "Tests new 'multi' option in Type::Params." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/v2-named-backcompat.t Type-Tiny`; :purpose "Named parameter tests for modern Type::Params v2 API on Perl 5.8." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/v2-named-plus-slurpy.t Type-Tiny`; :purpose "Named slurpy parameter tests for modern Type::Params v2 API." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/v2-named.t Type-Tiny`; :purpose "Named parameter tests for modern Type::Params v2 API." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/v2-positional-backcompat.t Type-Tiny`; :purpose "Positional parameter tests for modern Type::Params v2 API on Perl 5.8." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/v2-positional-plus-slurpy.t Type-Tiny`; :purpose "Named slurpy parameter tests for modern Type::Params v2 API." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/v2-positional.t Type-Tiny`; :purpose "Positional parameter tests for modern Type::Params v2 API." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/v2-returns.t Type-Tiny`; :purpose "Check that Type::Params v2 supports return typrs." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/v2-shortcuts.t Type-Tiny`; :purpose "Test 'signature_for_func' and 'signature_for_method' shortcuts." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/v2-warnings.t Type-Tiny`; :purpose "Tests warnings from Type::Params." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/v2-wrap-inherited-method.t Type-Tiny`; :purpose "Check that Type::Params v2 'signature_for' can find methods to wrap using inheritance." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params/wrap.t Type-Tiny`; :purpose "Test 'wrap_subs' and 'wrap_methods' from Type::Params." ];
	.
m`Type::Params::Signature Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Params-Signature/basic.t Type-Tiny`; :purpose "Basic tests that 'Type::Params::Signature->new_from_compile' works." ];
	.
m`Type::Parser Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Parser/basic.t Type-Tiny`; :purpose "Checks Type::Parser works." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Parser/moosextypes.t Type-Tiny`; :purpose "Checks Type::Parser can pick up MooseX::Types type constraints." ];
	.
m`Type::Registry Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Registry/automagic.t Type-Tiny`; :purpose "Checks Type::Registry->for_class is automagically populated." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Registry/basic.t Type-Tiny`; :purpose "Checks Type::Registry works." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Registry/methods.t Type-Tiny`; :purpose "Checks various newish Type::Registry method calls." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Registry/moosextypes.t Type-Tiny`; :purpose "Checks Type::Registry works with MooseX::Types." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Registry/mousextypes.t Type-Tiny`; :purpose "Checks Type::Registry works with MouseX::Types." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Registry/parent.t Type-Tiny`; :purpose "Check the Type::Registrys can have parents." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Registry/refcount.t Type-Tiny`; :purpose "Checks Type::Registry refcount stuff." ];
	.
m`Type::Tie Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tie/01basic.t Type-Tiny`; :purpose "Test that Type::Tie compiles and seems to work." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tie/02moosextypes.t Type-Tiny`; :purpose "Test that Type::Tie seems to work with MooseX::Types." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tie/03prototypicalweirdness.t Type-Tiny`; :purpose "Test that 'ttie' prototype works. Test case suggested by Graham Knop (HAARG)." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tie/04nots.t Type-Tiny`; :purpose "Test that Type::Tie works with a home-made type constraint system conforming to Type::API." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tie/05typetiny.t Type-Tiny`; :purpose "Test that Type::Tie seems to work with Type::Tiny." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tie/06clone.t Type-Tiny`; :purpose "Test that Type::Tie works with Clone::clone" ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tie/06storable.t Type-Tiny`; :purpose "Test that Type::Tie works with Storable::dclone" ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tie/basic.t Type-Tiny`; :purpose "Test that this sort of thing works: tie my $var, Int;" ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tie/very-minimal.t Type-Tiny`; :purpose "Test Type::Tie with a very minimal object, with only a 'check' method." ];
	.
m`Type::Tiny Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny/arithmetic.t Type-Tiny`; :purpose "Tests overloading of bitwise operators and numeric comparison operators for Type::Tiny." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny/basic.t Type-Tiny`; :purpose "Checks Type::Tiny works." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny/cmp.t Type-Tiny`; :purpose "Test new type comparison stuff with Type::Tiny objects." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny/coercion-modifiers.t Type-Tiny`; :purpose "Checks 'plus_coercions', 'minus_coercions' and 'no_coercions' methods work." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny/constraint-strings.t Type-Tiny`; :purpose "Checks Type::Tiny works accepts strings of Perl code as constraints." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny/custom-exception-classes.t Type-Tiny`; :purpose "Test Type::Tiny's 'exception_class' attribute." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny/definition-context.t Type-Tiny`; :purpose "Checks the 'definition_context' method." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny/deprecation.t Type-Tiny`; :purpose "Checks Type::Tiny's 'deprecated' attribute works." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny/esoteric.t Type-Tiny`; :purpose "Checks various undocumented Type::Tiny methods. The fact that these are tested here should not be construed to mean tht they are any any way a stable, supported part of the Type::Tiny API." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny/inline-assert.t Type-Tiny`; :purpose "Tests for Type::Tiny's 'inline_assert' method." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny/list-methods.t Type-Tiny`; :purpose "Checks Type::Tiny's list processing methods." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny/my-methods.t Type-Tiny`; :purpose "Checks Type::Tiny's 'my_methods' attribute." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny/parameterization.t Type-Tiny`; :purpose "There are loads of tests for parameterization in 'stdlib.t', 'stdlib-overload.t', 'stdlib-strmatch.t', 'stdlib-structures.t', 'syntax.t', 'stdlib-automatic.t', etc. This file includes a handful of other parameterization-related tests that didn't fit anywhere else." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny/refcount.t Type-Tiny`; :purpose "Checks Type::Tiny refcount stuff." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny/shortcuts.t Type-Tiny`; :purpose "Test the '->of' and '->where' shortcut methods." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny/smartmatch.t Type-Tiny`; :purpose "Checks Type::Tiny works with the smartmatch operator." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny/strictmode-off.t Type-Tiny`; :purpose "Check Type::Tiny '/' overload in lax mode." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny/strictmode-on.t Type-Tiny`; :purpose "Check Type::Tiny '/' overload in strict mode." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny/syntax.t Type-Tiny`; :purpose "Checks that all this Type[Param] syntactic sugar works. In particular, the following three type constraints are expected to be equivalent to each other: use Types::Standard qw( ArrayRef Int Num Str ); use Type::Utils qw( union intersection ); my $type1 = ArrayRef[Int] | ArrayRef[Num & ~Int] | ArrayRef[Str & ~Num]; my $type2 = union [ ArrayRef[Int], ArrayRef[Num & ~Int], ArrayRef[Str & ~Num], ]; my $type3 = union([ ArrayRef->parameterize(Int), ArrayRef->parameterize( intersection([ Num, Int->complementary_type, ]), ), ArrayRef->parameterize( intersection([ Str, Num->complementary_type, ]), ), ]);" ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny/to-moose.t Type-Tiny`; :purpose "Checks Type::Tiny objects can be converted to Moose type constraint objects." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny/to-mouse.t Type-Tiny`; :purpose "Checks Type::Tiny objects can be converted to Mouse type constraint objects." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny/type_default.t Type-Tiny`; :purpose "Checks Type::Tiny's 'type_default' attribute works." ];
	.
m`Type::Tiny::Bitfield Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Bitfield/basic.t Type-Tiny`; :purpose "(Unknown.)" ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Bitfield/errors.t Type-Tiny`; :purpose "(Unknown.)" ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Bitfield/import-options.t Type-Tiny`; :purpose "(Unknown.)" ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Bitfield/plus.t Type-Tiny`; :purpose "(Unknown.)" ];
	.
m`Type::Tiny::Class Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Class/basic.t Type-Tiny`; :purpose "Checks class type constraints work." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Class/errors.t Type-Tiny`; :purpose "Checks class type constraints throw sane error messages." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Class/exporter.t Type-Tiny`; :purpose "Checks Type::Tiny::Class can export." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Class/exporter_with_options.t Type-Tiny`; :purpose "Checks Type::Tiny::Class can export." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Class/plus-constructors.t Type-Tiny`; :purpose "Checks the 'Type::Tiny::Class''s 'plus_constructors' method." ];
	.
m`Type::Tiny::ConstrainedObject Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-ConstrainedObject/basic.t Type-Tiny`; :purpose "Check 'stringifies_to', 'numifies_to', and 'with_attribute_values' work for Type::Tiny::Class, Type::Tiny::Role, and Type::Tiny::Duck." ];
	.
m`Type::Tiny::Duck Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Duck/basic.t Type-Tiny`; :purpose "Checks duck type constraints work." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Duck/cmp.t Type-Tiny`; :purpose "Test new type comparison stuff with Type::Tiny::Duck objects." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Duck/errors.t Type-Tiny`; :purpose "Checks duck type constraints throw sane error messages." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Duck/exporter.t Type-Tiny`; :purpose "Checks Type::Tiny::Duck can export." ];
	.
m`Type::Tiny::Enum Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Enum/basic.t Type-Tiny`; :purpose "Checks enum type constraints work." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Enum/cmp.t Type-Tiny`; :purpose "Test new type comparison stuff with Type::Tiny::Enum." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Enum/errors.t Type-Tiny`; :purpose "Checks enum type constraints throw sane error messages." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Enum/exporter.t Type-Tiny`; :purpose "Checks Type::Tiny::Enum can export." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Enum/exporter_lexical.t Type-Tiny`; :purpose "Checks Type::Tiny::Enum can export." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Enum/sorter.t Type-Tiny`; :purpose "Checks Type::Tiny::Enum's sorter." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Enum/union_intersection.t Type-Tiny`; :purpose "Checks enums form natural unions and intersections." ];
	.
m`Type::Tiny::Intersection Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Intersection/basic.t Type-Tiny`; :purpose "Checks intersection type constraints work." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Intersection/cmp.t Type-Tiny`; :purpose "Check cmp for Type::Tiny::Intersection." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Intersection/constrainedobject.t Type-Tiny`; :purpose "Check 'stringifies_to', 'numifies_to', and 'with_attribute_values' work for Type::Tiny::Intersection." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Intersection/errors.t Type-Tiny`; :purpose "Checks intersection type constraints throw sane error messages." ];
	.
m`Type::Tiny::Role Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Role/basic.t Type-Tiny`; :purpose "Checks role type constraints work." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Role/errors.t Type-Tiny`; :purpose "Checks role type constraints throw sane error messages." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Role/exporter.t Type-Tiny`; :purpose "Checks Type::Tiny::Role can export." ];
	.
m`Type::Tiny::Union Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Union/basic.t Type-Tiny`; :purpose "Checks union type constraints work." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Union/constrainedobject.t Type-Tiny`; :purpose "Check 'stringifies_to', 'numifies_to', and 'with_attribute_values' work for Type::Tiny::Union." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Union/errors.t Type-Tiny`; :purpose "Checks union type constraints throw sane error messages." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-Union/relationships.t Type-Tiny`; :purpose "Checks union type constraint subtype/supertype relationships." ];
	.
m`Type::Tiny::_HalfOp Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-_HalfOp/double-union.t Type-Tiny`; :purpose "Ensure that the following works: ArrayRef[Str] | Undef | Str" ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-_HalfOp/extra-params.t Type-Tiny`; :purpose "Ensure that the following works consistently on all supported Perls: HashRef[Int]|Undef, @extra_parameters" ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Tiny-_HalfOp/overload-precedence.t Type-Tiny`; :purpose "Ensure that the following works consistently on all supported Perls: ArrayRef[Int] | HashRef[Int]" ];
	.
m`Type::Utils Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Utils/auto-registry.t Type-Tiny`; :purpose "Checks Type::Utils declaration functions put types in the caller type registry." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Utils/classifier.t Type-Tiny`; :purpose "Test Type::Utils 'classifier' function." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Utils/dwim-both.t Type-Tiny`; :purpose "Checks sane behaviour of 'dwim_type' from Type::Utils when both Moose and Mouse are loaded." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Utils/dwim-moose.t Type-Tiny`; :purpose "Checks Moose type constraints, and MooseX::Types type constraints are picked up by 'dwim_type' from Type::Utils." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Utils/dwim-mouse.t Type-Tiny`; :purpose "Checks Mouse type constraints, and MouseX::Types type constraints are picked up by 'dwim_type' from Type::Utils." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Utils/is.t Type-Tiny`; :purpose "Test Type::Utils 'is' function." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Utils/match-on-type.t Type-Tiny`; :purpose "Test Type::Utils 'match_on_type' and 'compile_match_on_type' functions." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Type-Utils/warnings.t Type-Tiny`; :purpose "Tests warnings raised by Type::Utils." ];
	.
m`Types::Common Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Common/basic.t Type-Tiny`; :purpose "Tests Types::Common." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Common/immutable.t Type-Tiny`; :purpose "Tests Types::Common cannot be added to!" ];
	.
m`Types::Common::Numeric Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Common-Numeric/basic.t Type-Tiny`; :purpose "Tests constraints for Types::Common::Numeric. These tests are based on tests from MooseX::Types::Common." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Common-Numeric/immutable.t Type-Tiny`; :purpose "Tests Types::Common::Numeric cannot be added to!" ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Common-Numeric/ranges.t Type-Tiny`; :purpose "Tests constraints for Types::Common::Numeric's 'IntRange' and 'NumRange'." ];
	.
m`Types::Common::String Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Common-String/basic.t Type-Tiny`; :purpose "Tests constraints for Types::Common::String. These tests are based on tests from MooseX::Types::Common." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Common-String/coerce.t Type-Tiny`; :purpose "Tests coercions for Types::Common::String. These tests are based on tests from MooseX::Types::Common." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Common-String/immutable.t Type-Tiny`; :purpose "Tests Types::Common::String cannot be added to!" ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Common-String/strlength.t Type-Tiny`; :purpose "Tests constraints for Types::Common::String's 'StrLength'tring" ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Common-String/unicode.t Type-Tiny`; :purpose "Tests Unicode support for Types::Common::String. These tests are based on tests from MooseX::Types::Common." ];
	.
m`Types::Standard Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Standard/arrayreflength.t Type-Tiny`; :purpose "Checks the new ArrayRef[$type, $min, $max] from Types::Standard." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Standard/basic.t Type-Tiny`; :purpose "Checks various values against the type constraints from Types::Standard." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Standard/cycletuple.t Type-Tiny`; :purpose "Checks various values against 'CycleTuple' from Types::Standard." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Standard/deep-coercions.t Type-Tiny`; :purpose "If a coercion exists for type 'Foo', then Type::Tiny should be able to auto-generate a coercion for type 'ArrayRef[Foo]', etc." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Standard/filehandle.t Type-Tiny`; :purpose "Checks various values against 'FileHandle' from Types::Standard." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Standard/immutable.t Type-Tiny`; :purpose "Tests Types::Standard cannot be added to!" ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Standard/lockdown.t Type-Tiny`; :purpose "OK, we need to bite the bullet and lock down coercions on core type constraints and parameterized type constraints." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Standard/mxtmlb-alike.t Type-Tiny`; :purpose "Test the following types from Types::Standard which were inspired by MooX::Types::MooseLike::Base. * 'InstanceOf' * 'ConsumerOf' * 'HasMethods' * 'Enum' Rather than checking they work directly, we check they are equivalent to known (and well-tested) type constraints generated using Type::Utils." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Standard/optlist.t Type-Tiny`; :purpose "Checks various values against 'OptList' from Types::Standard. Checks the standalone 'MkOpt' coercion." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Standard/overload.t Type-Tiny`; :purpose "Checks various values against 'Overload' from Types::Standard." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Standard/strmatch-allow-callbacks.t Type-Tiny`; :purpose "Checks various values against 'StrMatch' from Types::Standard when '$Type::Tiny::AvoidCallbacks' is false." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Standard/strmatch-avoid-callbacks.t Type-Tiny`; :purpose "Checks various values against 'StrMatch' from Types::Standard when '$Type::Tiny::AvoidCallbacks' is true." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Standard/strmatch.t Type-Tiny`; :purpose "Checks various values against 'StrMatch' from Types::Standard." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Standard/structured.t Type-Tiny`; :purpose "Checks various values against structured types from Types::Standard." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Standard/tied.t Type-Tiny`; :purpose "Checks various values against 'Tied' from Types::Standard." ];
	.
m`Types::Standard::ArrayRef Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Standard-ArrayRef/exporter.t Type-Tiny`; :purpose "Checks Types::Standard::ArrayRef can export." ];
	.
m`Types::Standard::CycleTuple Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Standard-CycleTuple/exporter.t Type-Tiny`; :purpose "Checks Types::Standard::CycleTuple can export." ];
	.
m`Types::Standard::Dict Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Standard-Dict/exporter.t Type-Tiny`; :purpose "Checks Types::Standard::Dict can export." ];
	.
m`Types::Standard::HashRef Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Standard-HashRef/exporter.t Type-Tiny`; :purpose "Checks Types::Standard::HashRef can export." ];
	.
m`Types::Standard::Map Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Standard-Map/exporter.t Type-Tiny`; :purpose "Checks Types::Standard::Map can export." ];
	.
m`Types::Standard::ScalarRef Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Standard-ScalarRef/exporter.t Type-Tiny`; :purpose "Checks Types::Standard::ScalarRef can export." ];
	.
m`Types::Standard::StrMatch Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Standard-StrMatch/exporter.t Type-Tiny`; :purpose "Checks Types::Standard::StrMatch can export." ];
	.
m`Types::Standard::Tuple Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-Standard-Tuple/exporter.t Type-Tiny`; :purpose "Checks Types::Standard::Tuple can export." ];
	.
m`Types::TypeTiny Type-Tiny`
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-TypeTiny/basic.t Type-Tiny`; :purpose "Test the Types::TypeTiny bootstrap library. (That is, type constraints used by Type::Tiny internally.)" ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-TypeTiny/coercion.t Type-Tiny`; :purpose "Test Types::TypeTiny::to_TypeTiny pseudo-coercion and the Types::TypeTiny::_ForeignTypeConstraint type." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-TypeTiny/meta.t Type-Tiny`; :purpose "Test the Types::TypeTiny introspection methods. Types::TypeTiny doesn't inherit from Type::Library (because bootstrapping), so provides independent re-implementations of the most important introspection stuff." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-TypeTiny/moosemouse.t Type-Tiny`; :purpose "Stuff that was originally in basic.t but was split out to avoid basic.t requiring Moose and Mouse." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-TypeTiny/progressiveexporter.t Type-Tiny`; :purpose "Checks that Types::TypeTiny avoids loading Exporter::Tiny." ];
	:test [ a :AutomatedTest; :test_script f`t/20-modules/Types-TypeTiny/type-puny.t Type-Tiny`; :purpose "Test that Type::Tiny works okay with Type::Puny, a clone of Type::Nano." ];
	.
[] a :AutomatedTest; :test_script f`t/30-external/Class-InsideOut/basic.t Type-Tiny`; :purpose "Check type constraints work with Class::InsideOut.".
[] a :AutomatedTest; :test_script f`t/30-external/Class-Plain/basic.t Type-Tiny`; :purpose "Check type constraints work with Class::Plain.".
[] a :AutomatedTest; :test_script f`t/30-external/Class-Plain/multisig.t Type-Tiny`; :purpose "Check type constraints work with Class::Plain.".
[] a :AutomatedTest; :test_script f`t/30-external/Data-Constraint/basic.t Type-Tiny`; :purpose "Tests integration with Data::Constraint.".
[] a :AutomatedTest; :test_script f`t/30-external/Exporter-Tiny/basic.t Type-Tiny`; :purpose "Tests Exporter::Tiny has the features Type::Tiny needs.".
[] a :AutomatedTest; :test_script f`t/30-external/Exporter-Tiny/installer.t Type-Tiny`; :purpose "Tests Type::Library libraries work with Sub::Exporter plugins.".
[] a :AutomatedTest; :test_script f`t/30-external/Exporter-Tiny/role-conflict.t Type-Tiny`; :purpose "Tests exporting to two roles; tries to avoid reporting conflicts.".
[] a :AutomatedTest; :test_script f`t/30-external/Function-Parameters/basic.t Type-Tiny`; :purpose "Check type constraints work with Function::Parameters.".
[] a :AutomatedTest; :test_script f`t/30-external/JSON-PP/basic.t Type-Tiny`; :purpose "Check *Bool* and *BoolLike* type constraints against JSON::PP's bools.".
[] a :AutomatedTest; :test_script f`t/30-external/Kavorka/80returntype.t Type-Tiny`; :purpose "Adopted test from Kavorka test suite.".
[] a :AutomatedTest; :test_script f`t/30-external/Kavorka/basic.t Type-Tiny`; :purpose "Checks Type::Tiny works with Kavorka.".
[] a :AutomatedTest; :test_script f`t/30-external/Moo/basic.t Type-Tiny`; :purpose "Check type constraints work with Moo. Checks values that should pass and should fail; checks error messages.".
[] a :AutomatedTest; :test_script f`t/30-external/Moo/coercion-inlining-avoidance.t Type-Tiny`; :purpose "A rather complex case of defining an attribute with a type coercion in Moo; and only then adding coercion definitions to it. Does Moo pick up on the changes? It should.".
[] a :AutomatedTest; :test_script f`t/30-external/Moo/coercion.t Type-Tiny`; :purpose "Check coercions work with Moo.".
[] a :AutomatedTest; :test_script f`t/30-external/Moo/exceptions.t Type-Tiny`; :purpose "Tests Error::TypeTiny interaction with Moo.".
[] a :AutomatedTest; :test_script f`t/30-external/Moo/inflation.t Type-Tiny`; :purpose "Checks that type constraints continue to work when a Moo class is inflated to a Moose class. Checks that Moo::HandleMoose correctly calls back to Type::Tiny to build Moose type constraints.".
[] a :AutomatedTest; :test_script f`t/30-external/Moo/inflation2.t Type-Tiny`; :purpose "A test for type constraint inflation from Moo to Moose.".
[] a :AutomatedTest; :test_script f`t/30-external/Moops/basic.t Type-Tiny`; :purpose "Check that type constraints work in Moops. This file is borrowed from the Moops test suite, where it is called '31types.t'.".
[] a :AutomatedTest; :test_script f`t/30-external/Moops/library-keyword.t Type-Tiny`; :purpose "Check that type libraries can be declared with Moops. This file is borrowed from the Moops test suite, where it is called '71library.t'.".
[] a :AutomatedTest; :test_script f`t/30-external/Moose/accept-moose-types.t Type-Tiny`; :purpose "Check that Moose type constraints can be passed into the Type::Tiny API where a Type::Tiny constraint might usually be expected.".
[] a :AutomatedTest; :test_script f`t/30-external/Moose/basic.t Type-Tiny`; :purpose "Check type constraints work with Moose. Checks values that should pass and should fail; checks error messages.".
[] a :AutomatedTest; :test_script f`t/30-external/Moose/coercion-more.t Type-Tiny`; :purpose "Test for the good old \"You cannot coerce an attribute unless its type has a coercion\" error.".
[] a :AutomatedTest; :test_script f`t/30-external/Moose/coercion.t Type-Tiny`; :purpose "Check coercions work with Moose; both mutable and immutable classes.".
[] a :AutomatedTest; :test_script f`t/30-external/Moose/inflate-then-inline.t Type-Tiny`; :purpose "Check type constraint inlining works with Moose in strange edge cases where we need to inflate Type::Tiny constraints into full Moose::Meta::TypeConstraint objects.".
[] a :AutomatedTest; :test_script f`t/30-external/Moose/native-attribute-traits.t Type-Tiny`; :purpose "Check type constraints and coercions work with Moose native attribute traits.".
[] a :AutomatedTest; :test_script f`t/30-external/Moose/parameterized.t Type-Tiny`; :purpose "Test that parameterizable Moose types are still parameterizable when they are converted to Type::Tiny.".
[] a :AutomatedTest; :test_script f`t/30-external/MooseX-Getopt/coercion.t Type-Tiny`; :purpose "Check coercions work with MooseX::Getopt; both mutable and immutable classes.".
[] a :AutomatedTest; :test_script f`t/30-external/MooseX-Types/basic.t Type-Tiny`; :purpose "Complex checks between Type::Tiny and MooseX::Types.".
[] a :AutomatedTest; :test_script f`t/30-external/MooseX-Types/extending.t Type-Tiny`; :purpose "Check that Type::Library can extend an existing MooseX::Types type constraint library.".
[] a :AutomatedTest; :test_script f`t/30-external/MooseX-Types/more.t Type-Tiny`; :purpose "More checks between Type::Tiny and MooseX::Types. This started out as an example of making a parameterized 'Not[]' type constraint, but worked out as a nice test case.".
[] a :AutomatedTest; :test_script f`t/30-external/Mouse/basic.t Type-Tiny`; :purpose "Check type constraints work with Mouse. Checks values that should pass and should fail; checks error messages.".
[] a :AutomatedTest; :test_script f`t/30-external/Mouse/coercion.t Type-Tiny`; :purpose "Check coercions work with Mouse; both mutable and immutable classes.".
[] a :AutomatedTest; :test_script f`t/30-external/Mouse/parameterized.t Type-Tiny`; :purpose "Test that parameterizable Mouse types are still parameterizable when they are converted to Type::Tiny.".
[] a :AutomatedTest; :test_script f`t/30-external/MouseX-Types/basic.t Type-Tiny`; :purpose "Complex checks between Type::Tiny and MouseX::Types.".
[] a :AutomatedTest; :test_script f`t/30-external/MouseX-Types/extending.t Type-Tiny`; :purpose "Check that Type::Library can extend an existing MooseX::Types type constraint library.".
[] a :AutomatedTest; :test_script f`t/30-external/Object-Accessor/basic.t Type-Tiny`; :purpose "Check type constraints work with Object::Accessor.".
[] a :AutomatedTest; :test_script f`t/30-external/Return-Type/basic.t Type-Tiny`; :purpose "Test that this sort of thing works: sub foo :ReturnType(Int) { ...; }".
[] a :AutomatedTest; :test_script f`t/30-external/Specio/basic.t Type-Tiny`; :purpose "Check that Specio type constraints can be converted to Type::Tiny with inlining support.".
[] a :AutomatedTest; :test_script f`t/30-external/Specio/library.t Type-Tiny`; :purpose "Check that Specio type libraries can be extended by Type::Library.".
[] a :AutomatedTest; :test_script f`t/30-external/Sub-Quote/basic.t Type-Tiny`; :purpose "Check type constraints can be made inlinable using Sub::Quote.".
[] a :AutomatedTest; :test_script f`t/30-external/Sub-Quote/delayed-quoting.t Type-Tiny`; :purpose "Check type constraints can be made inlinable using Sub::Quote even if Sub::Quote is loaded late.".
[] a :AutomatedTest; :test_script f`t/30-external/Sub-Quote/unquote-coercions.t Type-Tiny`; :purpose "Check type coercions can be unquoted Sub::Quote.".
[] a :AutomatedTest; :test_script f`t/30-external/Sub-Quote/unquote-constraints.t Type-Tiny`; :purpose "Check type constraints can be unquoted Sub::Quote.".
[] a :AutomatedTest; :test_script f`t/30-external/Switcheroo/basic.t Type-Tiny`; :purpose "Checks Type::Tiny works with Switcheroo.".
[] a :AutomatedTest; :test_script f`t/30-external/Type-Library-Compiler/basic.t Type-Tiny`; :purpose "Checks Type::Tiny interacts nicely with Type::Library::Compiled-generated libraries.".
[] a :AutomatedTest; :test_script f`t/30-external/Types-ReadOnly/basic.t Type-Tiny`; :purpose "Types::ReadOnly does some frickin weird stuff with parameterization. Check it all works!".
[] a :AutomatedTest; :test_script f`t/30-external/Validation-Class-Simple/archaic.t Type-Tiny`; :purpose "Fake Validation::Class::Simple 7.900017 by overriding '$VERSION' variable. (There is a reason for this... 'Types::TypeTiny::to_TypeTiny' follows two different code paths depending on the version of the Validation::Class::Simple object passed to it.)".
[] a :AutomatedTest; :test_script f`t/30-external/Validation-Class-Simple/basic.t Type-Tiny`; :purpose "Check type constraints Validation::Class::Simple objects can be used as type constraints.".
[] a :AutomatedTest; :test_script f`t/30-external/match-simple/basic.t Type-Tiny`; :purpose "Checks Type::Tiny works with match::simple.".
[] a :RegressionTest; :test_script f`t/40-bugs/73f51e2d.t Type-Tiny`; :purpose "Possible issue causing segfaults on threaded Perl 5.18.x.".
[] a :RegressionTest; :test_script f`t/40-bugs/hg166.t Type-Tiny`; :purpose "Ensure that stringifying Error::TypeTiny doesn't clobber '$@'.".
[] a :RegressionTest; :test_script f`t/40-bugs/ttxs-gh1.t Type-Tiny`; :purpose "Test that was failing with Type::Tiny::XS prior to 0.009.".
RT#85911
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/rt85911.t Type-Tiny`; :purpose "Test Type::Params with deep Dict coercion."];
	.
RT#86004
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/rt86004.t Type-Tiny`; :purpose "Test Type::Params with more complex Dict coercion."];
	.
RT#86233
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/rt86233.t Type-Tiny`; :purpose "Fix: \"Cannot inline type constraint check\" error with compile and Dict."];
	.
RT#86239
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/rt86239.t Type-Tiny`; :purpose "Fix: Optional constraints ignored if wrapped in Dict."];
	.
RT#90096
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/rt90096-2.t Type-Tiny`; :purpose "Additional tests related to RT#90096. Make sure that Type::Params localizes '$_'."];
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/rt90096.t Type-Tiny`; :purpose "Make sure that Type::Params localizes '$_'."];
	.
RT#92571
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/rt92571-2.t Type-Tiny`; :purpose "Make sure that the weakening of the reference from a Type::Coercion::Union object back to its \"owner\" type constraint does not break functionality."];
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/rt92571.t Type-Tiny`; :purpose "Make sure that the weakening of the reference from a Type::Coercion object back to its \"owner\" type constraint does not break functionality."];
	.
RT#92591
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/rt92591.t Type-Tiny`; :purpose "Make sure that 'declare_coercion' works outside type libraries."];
	.
RT#94196
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/rt94196.t Type-Tiny`; :purpose "Problematic inlining using '$_'."];
	.
RT#97684
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/rt97684.t Type-Tiny`; :purpose "The \"too few arguments for type constraint check functions\" error."];
	.
RT#98113
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/rt98113.t Type-Tiny`; :purpose "Test overload fallback"];
	.
RT#102748
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/rt102748.t Type-Tiny`; :purpose "Tests inheriting from a MooseX::Types library that uses MooseX::Types::Parameterizable and MooseX::Meta::TypeCoercion::Parameterizable."];
	.
RT#104154
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/rt104154.t Type-Tiny`; :purpose "Tests for deep coercion."];
	.
RT#121763
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/rt121763.t Type-Tiny`; :purpose "Test to make sure 'compile' keeps a reference to all the types that get compiled, to avoid them going away before exceptions can be thrown for them."];
	.
RT#125132
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/rt125132.t Type-Tiny`; :purpose "Test inlined Int type check clobbering '$1'."];
	.
RT#125765
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/rt125765.t Type-Tiny`; :purpose "Check weird error doesn't happen with deep explain."];
	.
RT#129729
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/rt129729.t Type-Tiny`; :purpose "Test that Enum types containing hyphens work."];
	.
RT#130823
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/rt130823.t Type-Tiny`; :purpose "Check for memory cycles."];
	.
RT#131401
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/rt131401.t Type-Tiny`; :purpose "Make sure that Type::Tiny::Class loads Type::Tiny early enough for bareword constants to be okay."];
	.
RT#131576
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/rt131576.t Type-Tiny`; :purpose "Test that inlined type checks don't generate issuing warning when compiled in packages that override built-ins."];
	.
RT#133141
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/rt133141.t Type-Tiny`; :purpose "Make sure that Tuple[Enum[\"test string\"]] can initialize in XS"];
	.
<tdb:2013:https://github.com/tobyink/p5-type-tiny/issues/1>
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/gh1.t Type-Tiny`; :purpose "Test that subtypes of Type::Tiny::Class work."];
	.
<tdb:2013:https://github.com/tobyink/p5-type-tiny/issues/14>
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/gh14.t Type-Tiny`; :purpose "Test for non-inlined coercions in Moo. The issue that prompted this test was actually invalid, caused by a typo in the bug reporter's code. But I wrote the test case, so I might as well include it."];
	.
<tdb:2013:https://github.com/tobyink/p5-type-tiny/issues/80>
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/gh80.t Type-Tiny`; :purpose "Test that stringifying Error::TypeTiny doesn't clobber $@."];
	.
<tdb:2013:https://github.com/tobyink/p5-type-tiny/issues/96>
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/gh96.t Type-Tiny`; :purpose "Type::Tiny's 'display_name' should never wrap lines!"];
	.
<tdb:2013:https://github.com/tobyink/p5-type-tiny/issues/140>
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/gh140.t Type-Tiny`; :purpose "Type::Params's 'optional' and 'slurpy' together."];
	.
<tdb:2013:https://github.com/tobyink/p5-type-tiny/issues/143>
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/gh143.t Type-Tiny`; :purpose "Test initializing tied variables."];
	.
<tdb:2013:https://github.com/tobyink/p5-type-tiny/issues/158>
	:regression_test [ a :RegressionTest; :test_script f`t/40-bugs/gh158.t Type-Tiny`; :purpose "Ensure no warning on certain shallow stack traces."];
	.
